====================================================================================================
CURSO API REST KTOR - SWAGGER
====================================================================================================


Dependência
----------------------------------------------------------------------------------------------------
- Adicionar a dependência

    ...
    <dependency>
       <groupId>io.ktor</groupId>
       <artifactId>ktor-server-swagger-jvm</artifactId>
       <version>${ktor.version}</version>
    </dependency>
    ...


Informações gerais da API
----------------------------------------------------------------------------------------------------
- Criar o folder 'swagger' no folder 'resources'

- Criar o arquivo 'swagger.yaml' no folder 'resources/swagger'

openapi: "3.0.3"
info:
  title: "API para gerenciamento de despesas pessoais"
  description: "Esta API disponibiliza recursos para gerenciamento de despesas pessoais."
  version: "1.0"


- Adicionar a linha abaixo no arquivo Routing.kt

  swaggerUI(path = "swagger-ui", swaggerFile = "swagger/swagger.yaml")

  Obs: O arquivo deve ficar conforme abaixo
  
    fun Application.configureRouting(di: DI) {
        routing {
            status()
            expense(di)
            swaggerUI(path = "swagger-ui", swaggerFile = "swagger/swagger.yaml")
        }
    }


Descrição dos endpoints
----------------------------------------------------------------------------------------------------
- Acrescentar as seguintes linhas no final do arquivo 'swagger.yaml'

...
paths:
  /expenses:
    post:
      summary: "Registra uma despesa"
      description: "Após a despesa ser registrada é retornado os dados da despesa com o identificador preenchido."
    get:
      summary: "Lista despesas registradas"
      description: "Listagem das despesas previamente registradas."
    put:
      summary: "Altera dados de uma despesas"
      description: "Após os dados serem alterados é retornado o status 204 sem conteúdo."
  /expenses/{id}:
    delete:
      summary: "Remove uma despesa"
      description: "Após a despesa ser removida é retornado o status 204 sem conteúdo."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"


Descrição das respostas dos endpoints
----------------------------------------------------------------------------------------------------
- Acrescentar as seguintes linhas no final da sessão 'post'

      ...
      responses:
        "201":
          description: "Dados da despesa com o identificador preenchido"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "400":
          description: "Erro informando problemas com os dados da requisição"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"


- Acrescentar as seguintes linhas no final da sessão 'get'

      ...
      responses:
        "200":
          description: "Lista contendo as despesas"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"


- Acrescentar as seguintes linhas no final da sessão 'put'

      ...
      responses:
        "204":
          description: ""
        "400":
          description: "Erro informando problemas com os dados da requisição e/ou informando que a despesa não existe."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"


- Acrescentar as seguintes linhas no final da sessão 'delete'

      ...
      responses:
        "204":
          description: ""
        "400":
          description: "Erro informando que a despesa não existe."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionResponse"


- Acrescentar as seguintes linhas do final do arquivo

...
components:
  schemas:
    Expense:
      type: "object"
      properties:
        id:
          type: "integer"
        description:
          type: "string"
        value:
          type: "double"
        paid_at:
          type: "date"
    ExceptionResponse:
      type: "object"
      properties:
        error:
          type: "integer"
        reason:
          type: "string"


Descrição das requisições
----------------------------------------------------------------------------------------------------
- Acrescentar as seguintes linhas no final da sessão 'post'

      ... 
      requestBody:
        description: "Objeto JSON contendo os dados da despesa"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseRequest"


- Acrescentar as seguintes linhas no final da sessão 'put'

      ... 
      requestBody:
        description: "Objeto JSON contendo os dados da despesa"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Expense"


